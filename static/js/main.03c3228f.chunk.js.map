{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","styles/globalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","smartContract","web3","errorMsg","blockchainReducer","state","action","type","payload","name","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","console","log","connectFailed","updateAccount","Screen","styled","div","image","SpacerSmall","SpacerMedium","Container","flex","fd","jc","ai","test","TextTitle","p","TextDescription","StyledButton","button","App","useDispatch","useSelector","useState","claimingNft","setClaimingNft","feedback","setFeedback","claimNFTs","_amount","mint","send","from","value","utils","toWei","String","once","then","receipt","useEffect","onClick","e","preventDefault","window","ethereum","Web3","request","method","accounts","SmartContractObj","eth","Contract","SmartContract","abi","on","location","reload","style","padding","textAlign","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03c3228f.chunk.js","sourcesContent":["const initialState = {\n  loading: false,\n  account: null,\n  smartContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        smartContract: action.payload.smartContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  name: \"\",\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...initialState,\n        loading: false,\n        name: action.payload.name,\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          name,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// constants\nimport Web3 from \"web3\";\nimport SmartContract from \"../../contracts/SmartContract.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        // const NetworkData = await SmartContract.networks[networkId];\n        // if (NetworkData) {\n        if (networkId == 4) {\n          const SmartContractObj = new web3.eth.Contract(\n            SmartContract.abi,\n            // NetworkData.address\n            \"0x5da9754deb342f4ae246b5eaf44aba6e01cda05d\"\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Rinkeby Testnet.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","import styled from \"styled-components\";\n\n// Used for wrapping a page component\nexport const Screen = styled.div`\n  background-color: var(--dark-grey);\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\n// Used for providing space between components\nexport const SpacerXSmall = styled.div`\n  height: 8px;\n  width: 8px;\n`;\n\n// Used for providing space between components\nexport const SpacerSmall = styled.div`\n  height: 16px;\n  width: 16px;\n`;\n\n// Used for providing space between components\nexport const SpacerMedium = styled.div`\n  height: 24px;\n  width: 24px;\n`;\n\n// Used for providing space between components\nexport const SpacerLarge = styled.div`\n  height: 32px;\n  width: 32px;\n`;\n\n// Used for providing a wrapper around a component\nexport const Container = styled.div`\n  display: flex;\n  flex: ${({ flex }) => (flex ? flex : 0)};\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\n  width: 100%;\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n`;\n\nexport const TextTitle = styled.p`\n  color: var(--white);\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const TextSubTitle = styled.p`\n  color: var(--white);\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const TextDescription = styled.p`\n  color: var(--white);\n  font-size: 14px;\n  font-weight: 600;\n`;\n\nexport const StyledClickable = styled.div`\n  :active {\n    opacity: 0.6;\n  }\n`;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\n\nexport const StyledButton = styled.button`\n  padding: 8px;\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n\n  const [claimingNft, setClaimingNft] = useState(false);\n  const [feedback, setFeedback] = useState(\"Maybe it's your lucky day!\");\n\n  const claimNFTs = (_amount) => {\n    setClaimingNft(true);\n    const amount = _amount || 1;\n    blockchain.smartContract.methods\n      .mint(blockchain.account, _amount)\n      .send({\n        from: blockchain.account,\n        value: blockchain.web3.utils.toWei(String(0.02 * _amount), \"ether\"),\n      })\n      .once(\"error\", (error) => {\n        console.log(error);\n        setFeedback(\"Error\");\n        setClaimingNft(false);\n      })\n      .then((receipt) => {\n        setFeedback(\n          \"Claim successfully! Go to https://testnets.opensea.io/ to see it.\"\n        );\n        setClaimingNft(false);\n      });\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.smartContract, dispatch]);\n\n  return (\n    <s.Screen>\n      {blockchain.account === \"\" || blockchain.smartContract === null ? (\n        <s.Container flex={1} ai={\"center\"} jc={\"center\"}>\n          <s.TextTitle>Connect to the Rinkeby Test Net</s.TextTitle>\n          <s.SpacerSmall />\n          <StyledButton\n            onClick={(e) => {\n              e.preventDefault();\n              dispatch(connect());\n            }}\n          >\n            CONNECT\n          </StyledButton>\n          <s.SpacerSmall />\n          {blockchain.errorMsg !== \"\" ? (\n            <s.TextDescription>{blockchain.errorMsg}</s.TextDescription>\n          ) : null}\n        </s.Container>\n      ) : (\n        <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n          <s.TextTitle style={{ textAlign: \"center\" }}>\n            NFT Collection Name: {data.name}.\n          </s.TextTitle>\n          <s.SpacerSmall />\n          <StyledButton\n            disabled={claimingNft ? 1 : 0}\n            onClick={(e) => {\n              e.preventDefault();\n              claimNFTs(1);\n            }}\n          >\n            {claimingNft ? \"Claiming...\" : \"Claim 1 NFT\"}\n          </StyledButton>\n          <s.SpacerSmall />\n          <StyledButton\n            disabled={claimingNft ? 1 : 0}\n            onClick={(e) => {\n              e.preventDefault();\n              claimNFTs(5);\n            }}\n          >\n            {claimingNft ? \"Claiming...\" : \"Claim 5 NFT\"}\n          </StyledButton>\n          <s.SpacerSmall />\n          <s.TextDescription style={{ textAlign: \"center\" }}>\n            {feedback}\n          </s.TextDescription>\n          <s.SpacerMedium />\n        </s.Container>\n\n        //  Get rinkeby ETH here: https://faucets.chain.link/rinkeby\n        // Check your collection on Opensea testnet: https://testnets.opensea.io/0x06afacd25eff7940e116513e833c58000c765bd5\n        //  Replace with your wallet address hash\n      )}\n    </s.Screen>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/reset.css\";\nimport \"./styles/theme.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}